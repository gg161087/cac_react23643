Clase:26:
creamos proyecto CaCFullStack
dentro la carpeta backend
npm init -y
npm i nodemon -D //para instalar como devDependecies y monitorear y cargar cambios sin parar el server
npm i cors //para poder intercambiar informacion entre servidores
npm i express //para poder crear y modularizar servidores
npm i mysql2 //para las conecciones con la BD
npm i sequelize //para crear tablas sin saber mysql

CLASE 27:
Continuamos con el proyecto CaCFullStack/backend

-Creamos database/db.js e importamos sequelize:
import { Sequelize } from 'sequelize';
export const db = new Sequelize('post23643', 'root', '', {
    host: 'localhost',
    dialect: 'mysql',
    port: 3306
})

Representamos la tabla de mysql en codigo:
-creamos models/postModel.js
import { db } from './../database/db.js';
import { DataTypes } from 'sequelize';
export const postModel = db.define('posts', {
    title: {type: DataTypes.STRING},
    content: {type: DataTypes.STRING}
})

Creamos controllers/postModel.js:
import { postModel } from './../models/postModel.js';
const getAllPosts = async (req, res, next) => {
    try {
        const response = await postModel.findAll();
        res.status(200).json(response);
    } catch (error) {
        console.log(error);
    }
}
const getPostById = async (req, res, next) => {
    const {id} = req.params
    try {
        const response = await postModel.findByPk(id);
        if (!response) {
            res.status(404).json({
                success: false,
                results: null,
                message: 'bad request'
            })
        }
        res.status(404).json({
            success: true,
            results: response
        })
    } catch (error) {
        res.status(404).json({
            success: false,
            results: 'error, bad request'
        })
    }
}
export default {
    getAllPosts,
    getPostById
}

Creamos routes/postRoutes.js:
import { Router } from 'express';
import postController from './../controllers/postController.js';
export const postRoutes = Router()
postRoutes.get('/', postController.getAllPosts);
postRoutes.get('/:id', postController.getPostById);

importamos las rutas en el index.js

CLASE 28:

Se completo el CRUD de posts en controllers/postController.js
import { postModel } from './../models/postModel.js';

const getAllPosts = async (req, res, next) => {
    try {
        const response = await postModel.findAll();
        res.status(200).json({
            success: true,
            results: response
        });
    } catch (error) {
        console.error(error);
        res.status(500).json({
            success: false,
            results: null,
            message: 'Error al obtener todos los posts.'
        });
    }
};

const getPost = async (req, res, next) => {
    const { id } = req.params;
    try {
        const response = await postModel.findByPk(id);
        if (!response) {
            return res.status(404).json({
                success: false,
                results: null,
                message: 'El post no fue encontrado.'
            });
        }
        res.status(200).json({
            success: true,
            results: response
        })
    } catch (error) {
        console.error(error);
        res.status(500).json({
            success: false,
            results: null,
            message: 'Error al obtener el post por ID.'
        });
    }
};

const createPost = async (req, res) => {
    const { title, content } = req.body;

    if (!title || !content) {
        res.status(400).json({
            success: false,
            results: null,
            message: 'Campos inválidos. Se requieren título y contenido.'
        });
    }

    try {
        const response = await postModel.create({
            title: title,
            content: content
        });

        if (!response) {
            return res.status(500).json({
                success: false,
                results: null,
                message: 'No se pudo crear el post.'
            });
        }

        res.status(200).json({
            success: true,
            message: 'Post agregado exitosamente'
        });

    } catch (error) {
        console.error(error);
        res.status(500).json({
            success: false,
            results: null,
            message: 'Error al crear el post.'
        });
    }
};

const editPost = async (req, res) => {
    const { id } = req.params;
    const { title, content } = req.body;

    if (!title || !content) {
        return res.status(400).json({
            success: false,
            results: null,
            message: 'Campos inválidos. Se requieren título y contenido.'
        });
    }

    try {
        const response = await postModel.update(
            { title: title, content: content },
            { where: { id: id } }
        );

        if (response[0] === 0 || !response) {
            return res.status(404).json({
                success: false,
                results: null,
                message: 'El post no fue encontrado o no se pudo actualizar.'
            });
        }

        res.status(200).json({
            success: true,
            message: 'Post actualizado correctamente'
        });

    } catch (error) {
        console.error(error);
        res.status(500).json({
            success: false,
            results: null,
            message: 'Error al actualizar el post.'
        });
    }
}

const deletePost = async (req, res) => {
    const { id } = req.params;
    try {
        const response = await postModel.destroy({
            where: { id: id }
        });

        if (response === 0) {
            return res.status(404).json({
                success: false,
                results: null,
                message: 'El post no fue encontrado o no se pudo eliminar.'
            });
        }
        res.status(200).json({
            success: true,
            message: 'Post eliminado correctamente'
        });

    } catch (error) {
        console.error(error);
        res.status(500).json({
            success: false,
            results: null,
            message: 'Error al eliminar el post.'
        });
    }
}

export default {
    getAllPosts,
    getPost,
    createPost,
    editPost,
    deletePost
}